import java.io.*;
import java.util.*;

public class MainVehicleCenter {
    public static void main(String[] args) {
        List<CustomerInfo> customerList = new LinkedList<>();
        ServiceCenterQueueManager queueManager = new ServiceCenterQueueManager();

        try (BufferedReader br = new BufferedReader(new FileReader("service_requests.txt"))) {
            String inData;

            while ((inData = br.readLine()) != null) {
                StringTokenizer st = new StringTokenizer(inData, ";");
                String id = st.nextToken();
                String name = st.nextToken();
                String plateNumber = st.nextToken();
                String service_id = st.nextToken();
                String service_type = st.nextToken();
                double service_cost = Double.parseDouble(st.nextToken());
                String service_date = st.nextToken();
                String service_completionTime = st.nextToken();

                ServiceInfo service = new ServiceInfo(service_id, service_type, service_cost, service_date, service_completionTime);
                CustomerInfo customer = findCustomerById(customerList, id);

                if (customer == null) {
                    customer = new CustomerInfo(id, name, plateNumber);
                    customerList.add(customer);
                }

                customer.addService(service);
            }

            // Assign customers to lanes based on service count
            for (CustomerInfo customer : customerList) {
                queueManager.assignToLane(customer);
            }

            // Process the queues
            queueManager.processLanes();
            queueManager.displayCompletedTransactions();

        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static CustomerInfo findCustomerById(List<CustomerInfo> customerList, String id) {
        for (CustomerInfo customer : customerList) {
            if (customer.getCustomerId().equals(id)) {
                return customer;
            }
        }
        return null;
    }
}
---------------------------------------------------------------------------------------------------------------------
import java.util.*;

public class ServiceCenterQueueManager {
    private Queue<CustomerInfo> lane1 = new LinkedList<>();
    private Queue<CustomerInfo> lane2 = new LinkedList<>();
    private Queue<CustomerInfo> lane3 = new LinkedList<>();
    private Stack<CustomerInfo> completeStack = new Stack<>();
    private int laneSwitch = 0;

    public void assignToLane(CustomerInfo customer) {
        if (customer.getServiceCount() <= 3) {
            if (laneSwitch % 2 == 0) {
                lane1.offer(customer);
            } else {
                lane2.offer(customer);
            }
            laneSwitch++;
        } else {
            lane3.offer(customer);
        }
    }

    public void processLanes() {
        processLane(lane1, "Lane 1");
        processLane(lane2, "Lane 2");
        processLane(lane3, "Lane 3");
    }

    private void processLane(Queue<CustomerInfo> lane, String laneName) {
        int count = 0;

        while (!lane.isEmpty()) {
            CustomerInfo customer = lane.poll();
            System.out.println("Processing " + laneName + ": ");
            System.out.println(customer);
            System.out.println("Total Cost: $" + customer.getTotalServiceCost());
            completeStack.push(customer);

            count++;
            if (count == 5) {
                break;
            }
        }
    }

    public void displayCompletedTransactions() {
        System.out.println("\nCompleted Transactions:");
        while (!completeStack.isEmpty()) {
            CustomerInfo customer = completeStack.pop();
            System.out.println(customer);
            System.out.println("Total Cost Paid: $" + customer.getTotalServiceCost());
            System.out.println("-----------------------------");
        }
    }
}
----------------------------------------------------------------------------------------------------------
import java.util.List;
import java.util.LinkedList;

public class CustomerInfo {
    private String customerId;
    private String customerName;
    private String vehiclePlateNumber;
    private List<ServiceInfo> serviceList;

    // Constructors
    public CustomerInfo() {
        this.serviceList = new LinkedList<>();
    }

    public CustomerInfo(String id, String name, String plateNumber) {
        this.customerId = id;
        this.customerName = name;
        this.vehiclePlateNumber = plateNumber;
        this.serviceList = new LinkedList<>();
    }

    // Method to add a service to the customer's list
    public void addService(ServiceInfo service) {
        this.serviceList.add(service);
    }

    // Get total cost of services for the customer
    public double getTotalServiceCost() {
        double total = 0;
        for (ServiceInfo service : serviceList) {
            total += service.getServiceCost();
        }
        return total;
    }

    // Get the number of services requested
    public int getServiceCount() {
        return serviceList.size();
    }

    // To String for displaying customer info
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Customer ID: ").append(customerId)
          .append(", Name: ").append(customerName)
          .append(", Plate Number: ").append(vehiclePlateNumber)
          .append("\nServices:\n");

        for (ServiceInfo service : serviceList) {
            sb.append("  - ").append(service.toString()).append("\n");
        }
        return sb.toString();
    }

    // Getters
    public String getCustomerId() { return customerId; }
    public String getCustomerName() { return customerName; }
    public String getVehiclePlateNumber() { return vehiclePlateNumber; }
    public List<ServiceInfo> getServiceList() { return serviceList; }
}
----------------------------------------------------------------------------------------------
public class ServiceInfo {
    private String serviceId;
    private String serviceType;
    private double serviceCost;
    private String serviceDate;
    private String estimatedCompletionTime;

    public ServiceInfo(String id, String type, double cost, String date, String completionTime) {
        serviceId = id;
        serviceType = type;
        serviceCost = cost;
        serviceDate = date;
        estimatedCompletionTime = completionTime;
    }

    public double getServiceCost() {
        return serviceCost;
    }

    @Override
    public String toString() {
        return "Service ID: " + serviceId + ", Type: " + serviceType +
               ", Cost: $" + serviceCost + ", Date: " + serviceDate +
               ", Estimated Completion: " + estimatedCompletionTime;
    }
}
